<?php
/**
 * ModuleOldenburg.php - Retrieves the modules Oldenburg-style
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * @author      Till Glöggler <tgloeggl@uos.de>
 * @license     http://www.gnu.org/licenses/gpl-2.0.html GPL version 2
 * @category    Stud.IP
 */
require_once dirname(__file__).'/ModuleRetriever.php';
require_once dirname(__file__)."/../PersonalRechte.php";

class ModuleOldenburg implements ModuleRetriever
{
    /**
     * Returns a tree in array-form of all modules
     *
     * @param  array  $filter
     * @param  int     $type
     * @return array
     */
    static function getAllModules ($filter = false, $type = null) {
        $sem_tree_ids = array();
        
        // get the all studiengeange
        $data = DBManager::get()->query(
            "SELECT sem_tree.* " .
            "FROM struktur_zuordnung " .
                "INNER JOIN sem_tree ON (sem_tree.sem_tree_id = struktur_zuordnung.sem_tree_id) " .
                "INNER JOIN studiengaenge ON (struktur_zuordnung.objekt_id = studiengaenge.studiengang_id) " .
        "")->fetchAll(PDO::FETCH_ASSOC);
            
        foreach ($data as $entry) {
            $sem_tree_ids[$entry['sem_tree_id']] = $entry;
            $sem_tree_ids[$entry['sem_tree_id']]['children'] = 
                self::getRecursiveModules(array($entry), $filter);
        }

        return $sem_tree_ids;
    }

    /**
     * returns parent nodes in sem-tree with name, denoting available modules
     * for submitted user
     *
     * @param  string  $user_id
     * @return  mixed  an array of sem_tree_ids
     */
    static function getModulesForUser($user_id, $filter = false) {

        return PersonalRechte::meineModule($user_id);

        $sem_tree_ids = array();

        // get the users studiengeange
        if (PersonalRechte::isRoot($user_id)) {
            return self::getAllModules();
        } else {
            $stmt = DBManager::get()->prepare(
                "SELECT studiengang_id " .
                "FROM stg_fsb_rollen " .
                "WHERE user_id = :user_id " .
                    "AND rollen_typ IN ('FSB', 'StuKo') " .
            "");
            $stmt->execute(array('user_id' => $user_id));
        }

        $studiengang_ids = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $stmt = DBManager::get()->prepare(
            "SELECT sem_tree.* " .
            "FROM struktur_zuordnung " .
                "LEFT JOIN sem_tree USING (sem_tree_id) " .
            "WHERE struktur_zuordnung.objekt_id = :studiengang_id " .
         "");
         foreach ($studiengang_ids as $st_id) {
            $stmt->execute(array('studiengang_id' => $st_id['studiengang_id']));
            $entry = $stmt->fetch(PDO::FETCH_ASSOC);
            $sem_tree_ids[$entry['sem_tree_id']] = $entry;
            $sem_tree_ids[$entry['sem_tree_id']]['children'] =
                self::getRecursiveModules(array($entry), $filter);
        }
        return $sem_tree_ids;
    }

    /**
     * Get all child-modules for submitted sem_tree_ids
     *
     * @param  array  $list_of_module_ids
     * @return array
     */
    static function getModules($list_of_module_ids) {
        $stmt = DBManager::get()->prepare("SELECT sem_tree_id, parent_id, name FROM sem_tree
        WHERE parent_id IN(?) ORDER BY priority ASC");
        $stmt->execute(array("'". implode("', '", $list_of_module_ids) . "'"));

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Return an array of names from the sem_tree,
     * which are the path to the submitted module
     *
     * @param  string  $module_id
     * @return array
     */
    static function getPath($module_id) {
        $list = array($module_id);
        $ret = array();

        $stmt = DBManager::get()->prepare("SELECT parent_id, name FROM sem_tree
            WHERE sem_tree_id = ?");

        while (!empty($list)) {
            $id = array_pop($list);
            $stmt->execute(array($id));
            if ($data = $stmt->fetch()) {
                $list[] = $data['parent_id'];
                array_unshift($ret, $data['name']);
            }
        }

        return $ret;
    }

    /**
     * Recursivly reads all childs of the submitted sem_tree_ids, filtering if
     * set, and returns a tree in form of an array
     *
     * @param  array  $sem_tree_ids
     * @param  array  $filter
     * @return array
     */
    static function getRecursiveModules($sem_tree_ids, $filter = false) {
        $children = array();
        $collection = array();
        
        $stmt = DBManager::get()->prepare("SELECT sem_tree.*, mod_zuordnung.kp FROM sem_tree
            LEFT JOIN mod_zuordnung USING (sem_tree_id)
            WHERE parent_id = ?");
         foreach ($sem_tree_ids as $entry) {
            $stmt->execute(array($entry['sem_tree_id']));
            while ($child = $stmt->fetch(PDO::FETCH_ASSOC)) {
                // allow to filter for specific types of entries
                if ($filter) {
                    if (in_array($child['type'], $filter) !== false) {
                        $collection[$child['sem_tree_id']] = $child;
                    }
                } else {
                    $collection[$child['sem_tree_id']] = $child;
                }

                $childlist = self::getRecursiveModules(array($child), $filter);
                if (!empty($childlist)) {
                    $collection[$child['sem_tree_id']]['children'] = $childlist;
                }
            }
        }

        return $collection;
        
    }
}
